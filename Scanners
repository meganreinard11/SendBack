import SwiftUI
import Vision
import VisionKit

@available(iOS 17.0, *)
public enum TorchMode { case off, on, auto }

// MARK: - VIN

@available(iOS 17.0, *)
public struct VinScanner: View {
    public var onMatch: (String) -> Void
    public var onManualEntry: (() -> Void)? = nil
    public var torch: TorchMode = .auto
    public var isValid: (String) -> Bool

    // Public default so it can be referenced from a default argument.
    public static func defaultVINValidator(_ s: String) -> Bool {
        let vin = s.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
        guard vin.count == 17 else { return false }
        let disallowed = CharacterSet(charactersIn: "IOQ")
        let allowed = CharacterSet(charactersIn: "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
        return vin.unicodeScalars.allSatisfy { allowed.contains($0) && !disallowed.contains($0) }
    }

    public init(
        onMatch: @escaping (String) -> Void,
        onManualEntry: (() -> Void)? = nil,
        torch: TorchMode = .auto,
        isValid: @escaping (String) -> Bool = VinScanner.defaultVINValidator
    ) {
        self.onMatch = onMatch
        self.onManualEntry = onManualEntry
        self.torch = torch
        self.isValid = isValid
    }

    public var body: some View {
        ScannerView(
            engine: .barcode(symbologies: [.code39, .code39Checksum, .code128, .pdf417]),
            validation: { candidate in isValid(candidate) },
            onScanned: { vin in
                onMatch(vin.trimmingCharacters(in: .whitespacesAndNewlines).uppercased())
            },
            onManualEntry: onManualEntry
        )
        .onAppear {
            switch torch {
            case .off: TorchController.shared.isOn = false
            case .on:  TorchController.shared.isOn = true
            case .auto: break
            }
        }
    }
}

// MARK: - License Plate

@available(iOS 17.0, *)
public struct PlateScanner: View {
    public var onMatch: (String) -> Void
    public var onManualEntry: (() -> Void)? = nil
    public var torch: TorchMode = .auto
    public var isValid: (String) -> Bool

    public static func normalizePlate(_ s: String) -> String {
        s.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
    }

    public static func defaultPlateValidator(_ s: String) -> Bool {
        let plate = normalizePlate(s)
        // Generic, pragmatic default; tighten per jurisdiction if needed.
        let regex = try! NSRegularExpression(pattern: #"^[A-Z0-9]{4,8}$"#)
        return regex.firstMatch(in: plate, range: NSRange(plate.startIndex..., in: plate)) != nil
    }

    public init(
        onMatch: @escaping (String) -> Void,
        onManualEntry: (() -> Void)? = nil,
        torch: TorchMode = .auto,
        isValid: @escaping (String) -> Bool = PlateScanner.defaultPlateValidator
    ) {
        self.onMatch = onMatch
        self.onManualEntry = onManualEntry
        self.torch = torch
        self.isValid = isValid
    }

    public var body: some View {
        ScannerView(
            engine: .licensePlate,
            validation: { candidate in isValid(candidate) },
            onScanned: { raw in
                onMatch(Self.normalizePlate(raw))
            },
            onManualEntry: onManualEntry
        )
        .onAppear {
            switch torch {
            case .off: TorchController.shared.isOn = false
            case .on:  TorchController.shared.isOn = true
            case .auto: break
            }
        }
    }
}
