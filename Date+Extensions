import Foundation

public extension Date {
    
    /// Add a certain number days days to the date.
    func adding(days: Double) -> Date {
        let seconds = Double(days) * 60 * 60 * 24
        return addingTimeInterval(seconds)
    }
    
    /// Add a certain number hours days to the date.
    func adding(hours: Double) -> Date {
        let seconds = Double(hours) * 60 * 60
        return addingTimeInterval(seconds)
    }
    
    /// Add a certain number minutes days to the date.
    func adding(minutes: Double) -> Date {
        let seconds = Double(minutes) * 60
        return addingTimeInterval(seconds)
    }
    
    /// Add a certain number seconds days to the date.
    func adding(seconds: Double) -> Date {
        addingTimeInterval(Double(seconds))
    }
    
    /// Remove a certain number of days to the date.
    func removing(days: Double) -> Date {
        adding(days: -days)
    }
    
    /// Remove a certain number of hours to the date.
    func removing(hours: Double) -> Date {
        adding(hours: -hours)
    }
    
    /// Remove a certain number of minutes to the date.
    func removing(minutes: Double) -> Date {
        adding(minutes: -minutes)
    }
    
    /// Remove a certain number of seconds to the date.
    func removing(seconds: Double) -> Date {
        adding(seconds: -seconds)
    }
    
    /// Whether the date occurs after another date.
    func isAfter(_ date: Date) -> Bool {
        self > date
    }
    
    /// Whether the date occurs before another date.
    func isBefore(_ date: Date) -> Bool {
        self < date
    }
    
    /// Whether the date is the same as another date.
    func isSame(as date: Date) -> Bool {
        self == date
    }

    /// Whether the date is the same as another date, for an explicity granularity, like `.day`.
    func isSame(
        _ granularity: Calendar.Component,
        as date: Date,
        for calendar: Calendar = .current
    ) -> Bool {
        calendar.isDate(self, equalTo: date, toGranularity: granularity)
    }

    /// Whether the date is the same as another date, for an xplicity granularity, like `.day`.
    func isThis(
        _ granularity: Calendar.Component,
        for calendar: Calendar = .current
    ) -> Bool {
        isSame(granularity, as: Date(), for: calendar)
    }
	
    /// The number of years between this and another date.
    func years(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.year], from: date, to: self).year ?? 0
    }
    
    /// The number of months between this and another date.
    func months(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.month], from: date, to: self).month ?? 0
    }
    
    /// The number of weeks between this and another date.
    func weeks(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.weekOfYear], from: date, to: self).weekOfYear ?? 0
    }
    
    /// The number of days between this and another date.
    func days(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.day], from: date, to: self).day ?? 0
    }
    
    /// The number of hours between this and another date.
    func hours(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.hour], from: date, to: self).hour ?? 0
    }
    
    /// The number of minutes between this and another date.
    func minutes(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.minute], from: date, to: self).minute ?? 0
    }
    
    /// The number of seconds between this and another date.
    func seconds(from date: Date, calendar: Calendar = .current) -> Int {
        calendar.dateComponents([.second], from: date, to: self).second ?? 0
    }
}
